Бинарный поиск 
Предположим, вы ищете фамилию человека в телефонной книге (какая древняя технология!). Она 
начинается с буквы «К». Конечно, можно начать 
с самого начала и перелистывать страницы, пока 
вы не доберетесь до буквы «К». Но скорее всего 
для ускорения поиска лучше раскрыть книгу на 
середине: ведь буква «К» должна находиться гдето ближе к середине телефонной книги. 
Или предположим, что вы ищете слово в словаре, 
и оно начинается с буквы «0». И снова лучше начать с середины. 
Теперь допустим, что вы вводите свои 
данные при входе на Facebook. При этом 
Facebook необходимо проверить, есть ли 
у вас учетная запись на сайте. Для этого ваше имя пользователя нужно найти 
в базе данных. Допустим, вы выбрали 
себе имя пользователя ~karlrnageddon~. 
Facebook может начать с буквы А и проверять все подряд, но разумнее будет начать 
с середины. 
Бинарный поиск 21 
Перед нами типичная задача поиска. И во всех этих случаях для решения 
задачи можно применить один алгоритм: бинарный поиск. 
Бинарный поиск - это алгоритм; на входе он получает отсортированный 
список элементов (позднее я объясню, почему он должен быть отсортирован). Если элемент, который вы ищете, присутствует в списке, то бинарный 
поиск возвращает ту позицию, в которой он был найден. В противном случае бинарный поиск возвращает null.
Рассмотрим пример того, как работает бинарный поиск. Сыграем в простую 
игру: я загадал число от 1до100. 
Вы должны отгадать мое число, использовав как можно меньше попыток. 
При каждой попытке я буду давать один из трех ответов: «мало», «много» 
или «угадал». 
Предположим, вы начинаете перебирать все варианты подряд: 1, 2, 3, 4 "" 
Вот как это будет выглядеть. 
Это пример простого поиска (возможно, термин «тупой поиск» был бы 
уместнее). При каждой догадке исключается только одно число. Если я загадал число 99, то , чтобы добраться до него, потребуется 99 попыток! 
Более эффективный поиск 
Существует другой, более эффективный способ. Начнем с 50. 
Слишком мало ... но вы только что исключили половину чисел! Теперь вы 
знаете, что все числа 1-50 меньше загаданного. Следующая попытка: 75. 
На этот раз перелет ... Но вы снова исключили половину оставшихся чисел! 
С бинарным поиском вы каждый раз загадываете число в середине диапазона 
и ис'КЛючаете половину оставшихся чисел. Следующим будет число 63 (по 
середине между 50 и 75). 
Так работает бинарный поиск. А вы только что узнали свой первый алгоритм! Попробуем поточнее определить, сколько чисел будет исключаться 
каждый раз.
При простом поиске может потребоваться 240 ООО попыток, если искомое 
слово находится на самой последней позиции в книге. С каждым шагом 
бинарного поиска количество слов сокращается вдвое , пока не останется 
ТОЛЬКО ОДНО СЛОВО .
Итак, бинарный поиск потребует 18 шагов 
- заметная разница! В общем случае для списка из п элементов бинарный поиск выполняется за 
log2n шагов, тогда как простой поиск будет выполнен за n шагов.
